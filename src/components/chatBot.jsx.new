import React, { useState, useEffect, useCallback } from "react";
import { FaPaperPlane, FaMicrophone } from "react-icons/fa";

const ChatBot = () => {
    const [question, setQuestion] = useState("");
    const [messages, setMessages] = useState([]); // Tracks conversation history
    const [isLoading, setIsLoading] = useState(false);
    const [isListening, setIsListening] = useState(false);

    const apiKey = import.meta.env.VITE_GEMENI_API_KEY;

    const handleSubmit = useCallback(async () => {
        if (!question.trim()) return;
        const userMessage = question;
        setQuestion("");
        await fetchChatbotResponse(userMessage);
    }, [question]);

    const fetchChatbotResponse = async (userMessage) => {
        if (!userMessage.trim()) return;

        setIsLoading(true);
        try {
            const response = await fetch(
                "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=" + apiKey,
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        contents: [{
                            parts: [{
                                text: `Act as an empathetic and professional mental health assistant named Alex. You have expertise in psychological support and emotional wellness. Your task is to:
                                  1. Create a safe, non-judgmental space for users to express their feelings
                                  2. Ask thoughtful questions to understand their emotional state
                                  3. Provide supportive responses and coping strategies
                                  4. Recognize signs of serious concerns and recommend professional help when needed
                                  5. Use a warm, compassionate tone while maintaining professional boundaries
                                  
                                  Guidelines:
                                  - Always validate emotions first before offering suggestions
                                  - Keep responses concise and clear
                                  - If you detect signs of crisis, provide crisis hotline information (1-800-273-8255)
                                  - Encourage professional help when appropriate
                                  - Never diagnose or prescribe medication
                                  
                                  Previous conversation: ${JSON.stringify(messages)}
                                  User's message: "${userMessage}"
                                  
                                  ${messages.length === 0 ? 
                                    'Start with a warm greeting, introduce yourself as Alex, and ask how they\'re feeling today.' : 
                                    'Respond empathetically and ask a relevant follow-up question based on their response.'}`
                            }]
                        }],
                        generationConfig: {
                            temperature: 0.7,
                            topK: 40,
                            topP: 0.95,
                            maxOutputTokens: 1024,
                        },
                        safetySettings: [
                            { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_MEDIUM_AND_ABOVE" },
                            { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_MEDIUM_AND_ABOVE" }
                        ]
                    })
                }
            );
            const data = await response.json();
            const answer = data?.candidates?.[0]?.content?.parts?.[0]?.text || "Sorry, I couldn't generate an answer.";

            // Update messages
            setMessages([...messages, { user: userMessage, bot: answer }]);
            speakText(answer); // Read response aloud
        } catch (error) {
            console.error("Error generating answer:", error);
            alert("Sorry, I couldn't generate an answer. Please try again.");
        } finally {
            setIsLoading(false);
        }
    };

    // Voice Input (Speech-to-Text)
    const startListening = () => {
        if (!("webkitSpeechRecognition" in window)) {
            alert("Your browser does not support speech recognition.");
            return;
        }

        const recognition = new window.webkitSpeechRecognition();
        recognition.continuous = false;
        recognition.interimResults = false;
        recognition.lang = "en-US";

        recognition.onstart = () => setIsListening(true);

        recognition.onresult = (event) => {
            const transcript = event.results[0][0].transcript;
            setQuestion(transcript);
            handleSubmit();
        };

        recognition.onerror = (event) => console.error("Speech recognition error:", event.error);
        recognition.onend = () => setIsListening(false);
        recognition.start();
    };

    // Text-to-Speech for chatbot responses
    const speakText = (text) => {
        if ("speechSynthesis" in window) {
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = "en-US";
            utterance.rate = 1;
            
            // Try to find a female voice
            const voices = window.speechSynthesis.getVoices();
            const femaleVoice = voices.find(voice => voice.name.includes("Female") || voice.name.includes("Samantha"));
            if (femaleVoice) {
                utterance.voice = femaleVoice;
            }
            
            window.speechSynthesis.speak(utterance);
        }
    };

    useEffect(() => {
        // Initialize the chat
        if (messages.length === 0) {
            fetchChatbotResponse("Hello");
        }
        // Load available voices
        window.speechSynthesis.getVoices();
    }, []);

    return (
        <div className="w-full h-full rounded-t-xl flex flex-col justify-between shadow-xl">
            {/* Header */}
            <div className="bg-teal-600 text-white px-4 py-3 rounded-t-xl flex justify-between items-center">
                <h3 className="font-medium text-lg">Chat with Alex - Your Mental Health Assistant</h3>
                <div className="text-sm">Safe Space for Mental Wellness</div>
            </div>

            {/* Chat content */}
            <div className="p-4 h-[75vh] overflow-auto bg-gray-50">
                {messages.map((msg, index) => (
                    <div key={index} className="mb-4">
                        <div className="text-teal-600 font-semibold">You:</div>
                        <div className="bg-gray-100 p-3 flex items-center gap-4 rounded-lg">
                            <div className="h-8 w-8 rounded-full bg-teal-100 flex items-center justify-center text-teal-600">
                                You
                            </div>
                            {msg.user}
                        </div>

                        <div className="text-teal-600 font-semibold mt-2">Alex:</div>
                        <div className="bg-white p-3 rounded-lg shadow-sm flex gap-4 items-center">
                            <div className="h-8 w-8 rounded-full bg-teal-600 flex items-center justify-center text-white">
                                A
                            </div>
                            {msg.bot}
                        </div>
                    </div>
                ))}
            </div>

            {/* Input area */}
            <div className="p-4 bg-white border-t border-gray-200">
                <div className="text-xs text-gray-500 mb-2 text-center">
                    Your conversations are private and secure. If you're in crisis, please call 1-800-273-8255 for immediate help.
                </div>
                <div className="flex items-center gap-2">
                    <textarea
                        value={question}
                        onChange={(e) => setQuestion(e.target.value)}
                        placeholder="Share how you're feeling..."
                        className="flex-1 border border-gray-300 rounded-lg p-2 focus:ring-2 focus:ring-teal-300 focus:border-teal-500 resize-none"
                        rows={2}
                        onKeyDown={(e) => {
                            if (e.key === "Enter" && !e.shiftKey) {
                                e.preventDefault();
                                handleSubmit();
                            }
                        }}
                    ></textarea>
                    <button 
                        onClick={handleSubmit}
                        disabled={isLoading} 
                        className="bg-teal-600 text-white p-3 rounded-lg hover:bg-teal-700 disabled:bg-teal-400 transition-colors"
                        title="Send message"
                    >
                        {isLoading ? 
                            <div className="h-5 w-5 border-t-2 border-r-2 border-white rounded-full animate-spin"></div> 
                            : <FaPaperPlane />
                        }
                    </button>
                    <button 
                        onClick={startListening} 
                        className={`p-3 rounded-lg transition-colors ${isListening ? "bg-red-500" : "bg-teal-600 hover:bg-teal-700"} text-white`}
                        title="Use voice input"
                    >
                        <FaMicrophone />
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ChatBot;
